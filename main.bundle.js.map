{"version":3,"file":"main.bundle.js","mappingsppjIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACzpIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACppPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACnhDA;AACA;AACA;AACA;AACA","sources":["webpack://test_farm/./src/FarmGrid.ts","webpack://test_farm/./src/FarmGridTile.ts","webpack://test_farm/./src/GameLoader.ts","webpack://test_farm/./src/ShopBar.ts","webpack://test_farm/./src/ShopTile.ts","webpack://test_farm/./src/StatusBar.ts","webpack://test_farm/./src/StatusBarTile.ts","webpack://test_farm/./src/World.ts","webpack://test_farm/./src/app.ts","webpack://test_farm/./src/logger.ts","webpack://test_farm/./src/models/ProgressBar.ts","webpack://test_farm/./src/models/StrokeRect.ts","webpack://test_farm/./src/models/Tile.ts","webpack://test_farm/webpack/bootstrap","webpack://test_farm/webpack/runtime/chunk loaded","webpack://test_farm/webpack/runtime/global","webpack://test_farm/webpack/runtime/hasOwnProperty shorthand","webpack://test_farm/webpack/runtime/node module decorator","webpack://test_farm/webpack/runtime/jsonp chunk loading","webpack://test_farm/webpack/before-startup","webpack://test_farm/webpack/startup","webpack://test_farm/webpack/after-startup"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FarmGrid = void 0;\nconst pixi_js_1 = require(\"pixi.js\");\nconst FarmGridTile_1 = require(\"./FarmGridTile\");\nconst logger_1 = require(\"./logger\");\nclass FarmGrid extends pixi_js_1.Container {\n    constructor(options) {\n        super();\n        this.widthCells = 8;\n        this.heightCells = 8;\n        this.cell = 40;\n        this.handleTileClick = (tile) => {\n            this.children.forEach(child => {\n                if (child !== tile) {\n                    child.deselect();\n                }\n            });\n            if (typeof this.onTileClick === 'function') {\n                this.onTileClick(tile, this);\n            }\n        };\n        this.handleWorldTick = (deltaMS) => {\n            this.children.forEach(child => {\n                child.handleFarmTick(deltaMS);\n            });\n        };\n        this.onTileClick = options.onTileClick;\n        this.setupGrid(options);\n    }\n    get totalWidth() {\n        return this.widthCells * this.cell;\n    }\n    get totalHeight() {\n        return this.heightCells * this.cell;\n    }\n    setupGrid({ textures: { grass, cornMask, chickenMask, cowMask, cornAnimated, chickenAnimated, cowAnimated } }) {\n        const { widthCells, heightCells, cell } = this;\n        for (let i = 0; i < widthCells; i++) {\n            for (let j = 0; j < heightCells; j++) {\n                const x = cell * i;\n                const y = cell * j;\n                const tile = new FarmGridTile_1.FarmGridTile({\n                    grassTextureResource: grass,\n                    cornBuildableTextureResource: cornMask,\n                    chickenBuildableTextureResource: chickenMask,\n                    cowBuildableTextureResource: cowMask,\n                    cornAnimatedTextureResources: cornAnimated,\n                    chickenAnimatedTextureResources: chickenAnimated,\n                    cowAnimatedTextureResources: cowAnimated,\n                    id: `${i}_${j}`,\n                    x,\n                    y,\n                    width: cell,\n                    height: cell,\n                    showSelected: false,\n                    onClick: this.handleTileClick\n                });\n                (0, logger_1.logFarmGrid)(`x=${x} y=${y} tx=${tile.x} ty=${tile.y} tw=${tile.width} th=${tile.height}`);\n                this.addChild(tile);\n            }\n        }\n    }\n    showFree() {\n        this.children.forEach(child => {\n            if (child.isFree) {\n                child.setType(FarmGridTile_1.FarmGridTile.TYPES.grass);\n            }\n            else {\n                switch (child.type) {\n                    case FarmGridTile_1.FarmGridTile.TYPES.possibleFeedChicken:\n                        child.setType(FarmGridTile_1.FarmGridTile.TYPES.chicken);\n                        break;\n                    case FarmGridTile_1.FarmGridTile.TYPES.possibleFeedCow:\n                        child.setType(FarmGridTile_1.FarmGridTile.TYPES.cow);\n                        break;\n                }\n            }\n        });\n    }\n    showBuildableCorn() {\n        this.children.forEach(child => {\n            if (child.isFree) {\n                child.setType(FarmGridTile_1.FarmGridTile.TYPES.possibleCorn);\n            }\n        });\n    }\n    showBuildableChicken() {\n        this.children.forEach(child => {\n            if (child.isFree) {\n                child.setType(FarmGridTile_1.FarmGridTile.TYPES.possibleChicken);\n            }\n        });\n    }\n    showBuildableCow() {\n        this.children.forEach(child => {\n            if (child.isFree) {\n                child.setType(FarmGridTile_1.FarmGridTile.TYPES.possibleCow);\n            }\n        });\n    }\n    showFeedable() {\n        this.children.forEach(child => {\n            if (child.isFeedable) {\n                switch (child.type) {\n                    case FarmGridTile_1.FarmGridTile.TYPES.chicken:\n                        child.setType(FarmGridTile_1.FarmGridTile.TYPES.possibleFeedChicken);\n                        break;\n                    case FarmGridTile_1.FarmGridTile.TYPES.cow:\n                        child.setType(FarmGridTile_1.FarmGridTile.TYPES.possibleFeedCow);\n                        break;\n                }\n            }\n        });\n    }\n}\nexports.FarmGrid = FarmGrid;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FarmGridTile = void 0;\nconst pixi_js_1 = require(\"pixi.js\");\nconst ProgressBar_1 = require(\"./models/ProgressBar\");\nconst StrokeRect_1 = require(\"./models/StrokeRect\");\nconst Tile_1 = require(\"./models/Tile\");\nvar FarmType;\n(function (FarmType) {\n    FarmType[FarmType[\"grass\"] = 0] = \"grass\";\n    FarmType[FarmType[\"possibleCorn\"] = 1] = \"possibleCorn\";\n    FarmType[FarmType[\"possibleChicken\"] = 2] = \"possibleChicken\";\n    FarmType[FarmType[\"possibleCow\"] = 3] = \"possibleCow\";\n    FarmType[FarmType[\"corn\"] = 4] = \"corn\";\n    FarmType[FarmType[\"chicken\"] = 5] = \"chicken\";\n    FarmType[FarmType[\"cow\"] = 6] = \"cow\";\n    FarmType[FarmType[\"possibleFeedChicken\"] = 7] = \"possibleFeedChicken\";\n    FarmType[FarmType[\"possibleFeedCow\"] = 8] = \"possibleFeedCow\";\n})(FarmType || (FarmType = {}));\nclass FarmGridTile extends Tile_1.Tile {\n    constructor(options) {\n        super(options);\n        this._generated = 0;\n        this._food = 1;\n        this.grassOptions = {\n            width: 46,\n            height: 46,\n            marginLeft: -23,\n            marginTop: -23\n        };\n        this.cornOptions = {\n            width: 26,\n            height: 26,\n            marginLeft: -13,\n            marginTop: -13,\n            animationSpeed: 0.05,\n            generateFactor: 1 / 10 / 1000\n        };\n        this.chickenOptions = {\n            width: 20,\n            height: 20,\n            marginLeft: -10,\n            marginTop: -10,\n            animationSpeed: 0.05,\n            generateFactor: 1 / 10 / 1000,\n            eatFactor: 1 / 30 / 1000\n        };\n        this.cowOptions = {\n            width: 36,\n            height: 36,\n            marginLeft: -18,\n            marginTop: -18,\n            animationSpeed: 0.05,\n            generateFactor: 1 / 20 / 1000,\n            eatFactor: 1 / 20 / 1000\n        };\n        this.foodOptions = {\n            width: 26,\n            height: 3,\n            marginLeft: -16,\n            marginTop: 8\n        };\n        this.generateOptions = {\n            width: 26,\n            height: 3,\n            marginLeft: -16,\n            marginTop: -18\n        };\n        this.rectOptions = {\n            width: 30,\n            height: 20,\n            marginLeft: 5,\n            marginTop: 10,\n            color: 0xeec643\n        };\n        this.handleFarmTick = (deltaMS) => {\n            switch (this.type) {\n                case FarmType.corn:\n                    this.generate({\n                        deltaMS, generateFactor: this.cornOptions.generateFactor\n                    });\n                    break;\n                case FarmType.chicken:\n                case FarmType.possibleFeedChicken:\n                    this.eatAndGenerate({\n                        deltaMS, eatFactor: this.chickenOptions.eatFactor, generateFactor: this.chickenOptions.generateFactor\n                    });\n                    break;\n                case FarmType.cow:\n                case FarmType.possibleFeedCow:\n                    this.eatAndGenerate({\n                        deltaMS, eatFactor: this.cowOptions.eatFactor, generateFactor: this.cowOptions.generateFactor\n                    });\n                    break;\n            }\n            this.updateProgressBars();\n        };\n        this.setup(options);\n        this.setType(FarmType.grass);\n    }\n    setup({ grassTextureResource, cornBuildableTextureResource, chickenBuildableTextureResource, cowBuildableTextureResource, cornAnimatedTextureResources, chickenAnimatedTextureResources, cowAnimatedTextureResources }) {\n        const { grassOptions, cornOptions, chickenOptions, cowOptions, rectOptions } = this;\n        const xCenter = this.posX + Math.round(this.width / 2);\n        const yCenter = this.posY + Math.round(this.height / 2);\n        const grassSprite = new pixi_js_1.Sprite(grassTextureResource);\n        grassSprite.width = grassOptions.width;\n        grassSprite.height = grassOptions.height;\n        grassSprite.position.x = xCenter + grassOptions.marginLeft;\n        grassSprite.position.y = yCenter + grassOptions.marginTop;\n        grassSprite.alpha = 0.5;\n        this.addChild(grassSprite);\n        const cornBuildableSprite = new pixi_js_1.Sprite(cornBuildableTextureResource);\n        cornBuildableSprite.width = cornOptions.width;\n        cornBuildableSprite.height = cornOptions.height;\n        cornBuildableSprite.position.x = xCenter + cornOptions.marginLeft;\n        cornBuildableSprite.position.y = yCenter + cornOptions.marginTop;\n        this.addChild(cornBuildableSprite);\n        this.cornBuildableSprite = cornBuildableSprite;\n        const chickenBuildableSprite = new pixi_js_1.Sprite(chickenBuildableTextureResource);\n        chickenBuildableSprite.width = chickenOptions.width;\n        chickenBuildableSprite.height = chickenOptions.height;\n        chickenBuildableSprite.position.x = xCenter + chickenOptions.marginLeft;\n        chickenBuildableSprite.position.y = yCenter + chickenOptions.marginTop;\n        this.addChild(chickenBuildableSprite);\n        this.chickenBuildableSprite = chickenBuildableSprite;\n        const cowBuildableSprite = new pixi_js_1.Sprite(cowBuildableTextureResource);\n        cowBuildableSprite.width = cowOptions.width;\n        cowBuildableSprite.height = cowOptions.height;\n        cowBuildableSprite.position.x = xCenter + cowOptions.marginLeft;\n        cowBuildableSprite.position.y = yCenter + cowOptions.marginTop;\n        this.addChild(cowBuildableSprite);\n        this.cowBuildableSprite = cowBuildableSprite;\n        const cornAnimatedSprite = new pixi_js_1.AnimatedSprite(cornAnimatedTextureResources);\n        cornAnimatedSprite.animationSpeed = cornOptions.animationSpeed * Math.random();\n        cornAnimatedSprite.width = cornOptions.width;\n        cornAnimatedSprite.height = cornOptions.height;\n        cornAnimatedSprite.position.x = xCenter + cornOptions.marginLeft;\n        cornAnimatedSprite.position.y = yCenter + cornOptions.marginTop;\n        cornAnimatedSprite.play();\n        this.addChild(cornAnimatedSprite);\n        this.cornAnimatedSprite = cornAnimatedSprite;\n        const chickenAnimatedSprite = new pixi_js_1.AnimatedSprite(chickenAnimatedTextureResources);\n        chickenAnimatedSprite.animationSpeed = chickenOptions.animationSpeed * Math.random();\n        chickenAnimatedSprite.width = chickenOptions.width;\n        chickenAnimatedSprite.height = chickenOptions.height;\n        chickenAnimatedSprite.position.x = xCenter + chickenOptions.marginLeft;\n        chickenAnimatedSprite.position.y = yCenter + chickenOptions.marginTop;\n        chickenAnimatedSprite.play();\n        this.addChild(chickenAnimatedSprite);\n        this.chickenAnimatedSprite = chickenAnimatedSprite;\n        const cowAnimatedSprite = new pixi_js_1.AnimatedSprite(cowAnimatedTextureResources);\n        cowAnimatedSprite.animationSpeed = cowOptions.animationSpeed * Math.random();\n        cowAnimatedSprite.width = cowOptions.width;\n        cowAnimatedSprite.height = cowOptions.height;\n        cowAnimatedSprite.position.x = xCenter + cowOptions.marginLeft;\n        cowAnimatedSprite.position.y = yCenter + cowOptions.marginTop;\n        cowAnimatedSprite.play();\n        this.addChild(cowAnimatedSprite);\n        this.cowAnimatedSprite = cowAnimatedSprite;\n        const rectGraphics = new StrokeRect_1.StrokeRect({\n            x: this.posX + rectOptions.marginLeft,\n            y: this.posY + rectOptions.marginTop,\n            width: rectOptions.width,\n            height: rectOptions.height,\n            color: rectOptions.color,\n            strokeWidth: 2\n        });\n        this.addChild(rectGraphics);\n        this.rectGraphics = rectGraphics;\n    }\n    hideAllSprites() {\n        const sprites = [\n            this.cornBuildableSprite, this.chickenBuildableSprite, this.cowBuildableSprite,\n            this.cornAnimatedSprite, this.chickenAnimatedSprite, this.cowAnimatedSprite,\n            this.rectGraphics\n        ];\n        sprites.forEach(sprite => { sprite.visible = false; });\n    }\n    setType(type) {\n        switch (type) {\n            case FarmType.grass:\n                this.hideAllSprites();\n                break;\n            case FarmType.possibleCorn:\n                this.hideAllSprites();\n                this.cornBuildableSprite.visible = true;\n                break;\n            case FarmType.possibleChicken:\n                this.hideAllSprites();\n                this.chickenBuildableSprite.visible = true;\n                break;\n            case FarmType.possibleCow:\n                this.hideAllSprites();\n                this.cowBuildableSprite.visible = true;\n                break;\n            case FarmType.corn:\n                this.hideAllSprites();\n                this.cornAnimatedSprite.visible = true;\n                this.appendProgressBars();\n                break;\n            case FarmType.chicken:\n                this.hideAllSprites();\n                this.chickenAnimatedSprite.visible = true;\n                this.appendProgressBars();\n                break;\n            case FarmType.cow:\n                this.hideAllSprites();\n                this.cowAnimatedSprite.visible = true;\n                this.appendProgressBars();\n                break;\n            case FarmType.possibleFeedChicken:\n            case FarmType.possibleFeedCow:\n                this.rectGraphics.visible = true;\n                break;\n        }\n        this.type = type;\n    }\n    appendProgressBars() {\n        const xCenter = this.posX + Math.round(this.width / 2);\n        const yCenter = this.posY + Math.round(this.height / 2);\n        const { type, foodOptions, generateOptions, _food, _generated } = this;\n        if ([\n            FarmType.possibleCorn,\n            FarmType.possibleChicken,\n            FarmType.possibleCow\n        ].includes(type)) {\n            const typeToMinColor = {\n                [FarmType.possibleCorn]: 0xeec643,\n                [FarmType.possibleChicken]: 0xeef0f2,\n                [FarmType.possibleCow]: 0x0d21a1\n            };\n            this.generateProgress = new ProgressBar_1.ProgressBar({\n                x: xCenter + generateOptions.marginLeft,\n                y: yCenter + generateOptions.marginTop,\n                width: generateOptions.width,\n                height: generateOptions.height,\n                value: _generated,\n                minColor: typeToMinColor[type],\n                maxColor: typeToMinColor[type]\n            });\n            this.addChild(this.generateProgress);\n        }\n        if ([\n            FarmType.possibleChicken,\n            FarmType.possibleCow\n        ].includes(type)) {\n            this.foodProgress = new ProgressBar_1.ProgressBar({\n                x: xCenter + foodOptions.marginLeft,\n                y: yCenter + foodOptions.marginTop,\n                width: foodOptions.width,\n                height: foodOptions.height,\n                value: _food,\n                minColor: 0xff0000,\n                maxColor: 0x00ff00\n            });\n            this.addChild(this.foodProgress);\n        }\n    }\n    get isFree() {\n        return [\n            FarmType.grass,\n            FarmType.possibleCorn,\n            FarmType.possibleChicken,\n            FarmType.possibleCow\n        ].includes(this.type);\n    }\n    get isOccupied() {\n        return [\n            FarmType.corn,\n            FarmType.chicken,\n            FarmType.cow,\n            FarmType.possibleFeedChicken,\n            FarmType.possibleFeedCow\n        ].includes(this.type);\n    }\n    get isFeedable() {\n        return [\n            FarmType.chicken,\n            FarmType.cow,\n            FarmType.possibleFeedChicken,\n            FarmType.possibleFeedCow\n        ].includes(this.type);\n    }\n    generate({ deltaMS, generateFactor }) {\n        if (this._generated > 1) {\n            this._generated = 1;\n        }\n        else if (this._generated === 1) {\n            // skip grow ??\n        }\n        else {\n            this._generated += deltaMS * generateFactor;\n        }\n    }\n    eatAndGenerate({ deltaMS, eatFactor, generateFactor }) {\n        let spentFood = 0;\n        const deltaFood = deltaMS * eatFactor;\n        if (this._food > 0) {\n            const wasFood = this._food;\n            this._food -= deltaFood;\n            if (this._food <= 0) {\n                this._food = 0;\n                spentFood = wasFood;\n            }\n            else {\n                spentFood = deltaFood;\n            }\n        }\n        this._generated += spentFood / eatFactor * generateFactor;\n        if (this._generated > 1) {\n            this._generated = 1; // limit ??\n        }\n    }\n    updateProgressBars() {\n        if (this.generateProgress != null) {\n            this.generateProgress.update(this._generated);\n            if (this._generated >= 1) {\n                this.generateProgress.initHeight = 10;\n                this.generateProgress.initWidth = 10;\n                this.generateProgress.alpha = 1;\n            }\n            else {\n                this.generateProgress.alpha = 0.5;\n                this.generateProgress.initHeight = this.generateOptions.height;\n                this.generateProgress.initWidth = this.generateOptions.width;\n            }\n        }\n        if (this.foodProgress != null) {\n            this.foodProgress.update(this._food);\n        }\n    }\n    harvest() {\n        if (this._generated >= 1) {\n            this._generated -= 1;\n            return 1;\n        }\n        return 0;\n    }\n    feed(value) {\n        this._food += value;\n        if (this._food > 1) {\n            this._food = 1;\n        }\n    }\n}\nexports.FarmGridTile = FarmGridTile;\nFarmGridTile.TYPES = FarmType;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GameLoader = void 0;\nconst pixi_js_1 = require(\"pixi.js\");\nclass GameLoader {\n    constructor() {\n        this.loader = pixi_js_1.Assets;\n    }\n    async loadAll() {\n        await this.loadSettings();\n        await this.loadResources();\n    }\n    async loadSettings() {\n        this.settings = await fetch('settings.json').then(async (res) => await res.json());\n    }\n    async loadResources() {\n        this.loader.add('tileset', 'assets/spritesheets/spritesheet.json');\n        this.spritesheet = await this.loader.load('tileset');\n    }\n}\nexports.GameLoader = GameLoader;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ShopBar = void 0;\nconst pixi_js_1 = require(\"pixi.js\");\nconst logger_1 = require(\"./logger\");\nconst ShopTile_1 = require(\"./ShopTile\");\nclass ShopBar extends pixi_js_1.Container {\n    constructor(options) {\n        super();\n        this.widthCells = 3;\n        this.heightCells = 1;\n        this.cellWidth = 100;\n        this.cellHeight = 40;\n        this.cornOptions = {\n            cost: 5,\n            icon: {\n                width: 30,\n                height: 30,\n                marginLeft: -30,\n                marginTop: -15\n            }\n        };\n        this.chickenOptions = {\n            cost: 10,\n            icon: {\n                width: 30,\n                height: 30,\n                marginLeft: -25,\n                marginTop: -15\n            }\n        };\n        this.cowOptions = {\n            cost: 30,\n            icon: {\n                width: 50,\n                height: 50,\n                marginLeft: -40,\n                marginTop: -25\n            }\n        };\n        this.idxToCost = {\n            0: this.cornOptions.cost,\n            1: this.chickenOptions.cost,\n            2: this.cowOptions.cost\n        };\n        this.handleTileClick = (tile) => {\n            this.children.forEach(child => {\n                if (child !== tile) {\n                    child.deselect();\n                }\n            });\n            if (typeof this.onTileClick === 'function') {\n                this.onTileClick(tile, this);\n            }\n        };\n        this.onTileClick = options.onTileClick;\n        this.setup(options);\n    }\n    get totalWidth() {\n        return this.widthCells * this.cellWidth;\n    }\n    get totalHeight() {\n        return this.heightCells * this.cellHeight;\n    }\n    setup({ textures: { money, corn, chicken, cow } }) {\n        const idxToType = {\n            0: ShopTile_1.ShopTile.TYPES.corn,\n            1: ShopTile_1.ShopTile.TYPES.chicken,\n            2: ShopTile_1.ShopTile.TYPES.cow\n        };\n        const idxToTexture = {\n            0: corn,\n            1: chicken,\n            2: cow\n        };\n        const { widthCells, heightCells, cellWidth, cellHeight, cornOptions, chickenOptions, cowOptions, idxToCost } = this;\n        const idxToWidth = {\n            0: cornOptions.icon.width,\n            1: chickenOptions.icon.width,\n            2: cowOptions.icon.width\n        };\n        const idxToHeight = {\n            0: cornOptions.icon.height,\n            1: chickenOptions.icon.height,\n            2: cowOptions.icon.height\n        };\n        const idxToMarginLeft = {\n            0: cornOptions.icon.marginLeft,\n            1: chickenOptions.icon.marginLeft,\n            2: cowOptions.icon.marginLeft\n        };\n        const idxToMarginTop = {\n            0: cornOptions.icon.marginTop,\n            1: chickenOptions.icon.marginTop,\n            2: cowOptions.icon.marginTop\n        };\n        for (let i = 0; i < widthCells; i++) {\n            for (let j = 0; j < heightCells; j++) {\n                const x = cellWidth * i;\n                const y = cellHeight * j;\n                const tile = new ShopTile_1.ShopTile({\n                    id: `${i}_${j}`,\n                    type: idxToType[i],\n                    x: i > 0 ? x + i * 10 : x,\n                    y,\n                    width: cellWidth,\n                    height: cellHeight,\n                    onClick: this.handleTileClick,\n                    cost: idxToCost[i],\n                    itemTextureResource: idxToTexture[i],\n                    moneyTextureResource: money,\n                    iconOptions: {\n                        width: idxToWidth[i],\n                        height: idxToHeight[i],\n                        marginLeft: idxToMarginLeft[i],\n                        marginTop: idxToMarginTop[i]\n                    }\n                });\n                (0, logger_1.logFarmShop)(`x=${x} y=${y} tx=${tile.x} ty=${tile.y} tw=${tile.width} th=${tile.height}`);\n                this.addChild(tile);\n            }\n        }\n    }\n    deselectAll() {\n        this.children.forEach(child => {\n            child.deselect();\n        });\n    }\n}\nexports.ShopBar = ShopBar;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ShopTile = void 0;\nconst pixi_js_1 = require(\"pixi.js\");\nconst Tile_1 = require(\"./models/Tile\");\nvar ShopTileType;\n(function (ShopTileType) {\n    ShopTileType[ShopTileType[\"corn\"] = 0] = \"corn\";\n    ShopTileType[ShopTileType[\"chicken\"] = 1] = \"chicken\";\n    ShopTileType[ShopTileType[\"cow\"] = 2] = \"cow\";\n})(ShopTileType || (ShopTileType = {}));\nclass ShopTile extends Tile_1.Tile {\n    constructor(options) {\n        super(options);\n        this.fontSize = 10;\n        this.moneyOptions = {\n            width: 10,\n            height: 15,\n            marginLeft: 10,\n            marginTop: -7\n        };\n        this.textOptions = {\n            marginLeft: 25,\n            marginTop: -5\n        };\n        this.type = options.type;\n        this.cost = options.cost;\n        this.setup(options);\n    }\n    setup({ itemTextureResource, moneyTextureResource, iconOptions: { width, height, marginLeft, marginTop } }) {\n        const { cost, fontSize, moneyOptions, textOptions } = this;\n        const xCenter = this.posX + Math.round(this.width / 2);\n        const yCenter = this.posY + Math.round(this.height / 2);\n        const texture = new pixi_js_1.Sprite(itemTextureResource);\n        texture.width = width;\n        texture.height = height;\n        texture.position.x = xCenter + marginLeft;\n        texture.position.y = yCenter + marginTop;\n        this.addChild(texture);\n        const textIcon = new pixi_js_1.Sprite(moneyTextureResource);\n        textIcon.width = moneyOptions.width;\n        textIcon.height = moneyOptions.height;\n        textIcon.position.x = xCenter + moneyOptions.marginLeft;\n        textIcon.position.y = yCenter + moneyOptions.marginTop;\n        this.addChild(textIcon);\n        const text = new pixi_js_1.Text(cost, {\n            fontFamily: 'Arial',\n            fontSize,\n            fill: 0x141414,\n            align: 'center'\n        });\n        text.position.x = xCenter + textOptions.marginLeft;\n        text.position.y = yCenter + textOptions.marginTop;\n        this.addChild(text);\n    }\n}\nexports.ShopTile = ShopTile;\nShopTile.TYPES = ShopTileType;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StatusBar = void 0;\nconst pixi_js_1 = require(\"pixi.js\");\nconst logger_1 = require(\"./logger\");\nconst StatusBarTile_1 = require(\"./StatusBarTile\");\nclass StatusBar extends pixi_js_1.Container {\n    constructor(options) {\n        super();\n        this.widthCells = 4;\n        this.heightCells = 1;\n        this.cellWidth = 80;\n        this.cellHeight = 40;\n        this._initMoney = 100;\n        this._initCorns = 0;\n        this._initEggs = 0;\n        this._initMilks = 0;\n        this.eggCost = 2;\n        this.milkCost = 5;\n        this.idxToValue = {\n            0: this._initMoney,\n            1: this._initCorns,\n            2: this._initEggs,\n            3: this._initMilks\n        };\n        this.handleTileClick = (tile) => {\n            this.children.forEach(child => {\n                if (child !== tile) {\n                    child.deselect();\n                }\n            });\n            if (typeof this.onTileClick === 'function') {\n                this.onTileClick(tile, this);\n            }\n        };\n        this.onTileClick = options.onTileClick;\n        this.setup(options);\n    }\n    get totalWidth() {\n        return this.widthCells * this.cellWidth;\n    }\n    get totalHeight() {\n        return this.heightCells * this.cellHeight;\n    }\n    get money() {\n        return this.children[0].value;\n    }\n    get corn() {\n        return this.children[1].value;\n    }\n    setup({ textures: { money, corn, egg, milk } }) {\n        const idxToType = {\n            0: StatusBarTile_1.StatusBarTile.TYPES.money,\n            1: StatusBarTile_1.StatusBarTile.TYPES.corns,\n            2: StatusBarTile_1.StatusBarTile.TYPES.eggs,\n            3: StatusBarTile_1.StatusBarTile.TYPES.milks\n        };\n        const idxToTexture = {\n            0: money,\n            1: corn,\n            2: egg,\n            3: milk\n        };\n        const idxToHover = {\n            0: false,\n            1: true,\n            2: true,\n            3: true\n        };\n        const idxToSelected = {\n            0: false,\n            1: true,\n            2: false,\n            3: false\n        };\n        const { widthCells, heightCells, cellWidth, cellHeight, idxToValue } = this;\n        for (let i = 0; i < widthCells; i++) {\n            for (let j = 0; j < heightCells; j++) {\n                const x = cellWidth * i;\n                const y = cellHeight * j;\n                const tile = new StatusBarTile_1.StatusBarTile({\n                    id: `${i}_${j}`,\n                    type: idxToType[i],\n                    iconTextureResource: idxToTexture[i],\n                    x,\n                    y,\n                    width: cellWidth,\n                    height: cellHeight,\n                    showSelected: idxToSelected[i],\n                    value: idxToValue[i],\n                    onClick: this.handleTileClick,\n                    showHover: idxToHover[i],\n                    isButtonMode: i !== 0,\n                    isInteractive: i !== 0\n                });\n                (0, logger_1.logFarmStatus)(`x=${x} y=${y} tx=${tile.x} ty=${tile.y} tw=${tile.width} th=${tile.height}`);\n                this.addChild(tile);\n            }\n        }\n    }\n    addMoney(value) {\n        this.children[0].add(value);\n    }\n    subMoney(value) {\n        this.children[0].sub(value);\n    }\n    addCorn(value) {\n        this.children[1].add(value);\n    }\n    subCorn(value) {\n        this.children[1].sub(value);\n    }\n    addEgg(value) {\n        this.children[2].add(value);\n    }\n    sellEggs() {\n        this.children[0].add(this.children[2].value * this.eggCost);\n        this.children[2].updateValue(0);\n    }\n    addMilk(value) {\n        this.children[3].add(value);\n    }\n    sellMilks() {\n        this.children[0].add(this.children[3].value * this.milkCost);\n        this.children[3].updateValue(0);\n    }\n    deselectAll() {\n        this.children.forEach(child => {\n            child.deselect();\n        });\n    }\n}\nexports.StatusBar = StatusBar;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StatusBarTile = void 0;\nconst pixi_js_1 = require(\"pixi.js\");\nconst Tile_1 = require(\"./models/Tile\");\nvar StatusType;\n(function (StatusType) {\n    StatusType[StatusType[\"money\"] = 0] = \"money\";\n    StatusType[StatusType[\"corns\"] = 1] = \"corns\";\n    StatusType[StatusType[\"eggs\"] = 2] = \"eggs\";\n    StatusType[StatusType[\"milks\"] = 3] = \"milks\";\n})(StatusType || (StatusType = {}));\nclass StatusBarTile extends Tile_1.Tile {\n    constructor(options) {\n        super(options);\n        this.iconOptions = {\n            width: 16,\n            height: 24,\n            marginLeft: -25,\n            marginTop: -12\n        };\n        this.textOptions = {\n            fontSize: 20,\n            color: 0x141414,\n            marginLeft: 0,\n            marginTop: -10\n        };\n        this._value = 0;\n        this.type = options.type;\n        this._value = options.value;\n        this.setup(options);\n    }\n    get value() {\n        return this._value;\n    }\n    setup({ iconTextureResource }) {\n        const { _value, iconOptions, textOptions } = this;\n        const xCenter = this.posX + Math.round(this.width / 2);\n        const yCenter = this.posY + Math.round(this.height / 2);\n        const texture = new pixi_js_1.Sprite(iconTextureResource);\n        texture.width = iconOptions.width;\n        texture.height = iconOptions.height;\n        texture.position.x = xCenter + iconOptions.marginLeft;\n        texture.position.y = yCenter + iconOptions.marginTop;\n        this.addChild(texture);\n        const text = new pixi_js_1.Text(_value, {\n            fontFamily: 'Arial',\n            fontSize: textOptions.fontSize,\n            fill: textOptions.color,\n            align: 'center'\n        });\n        text.position.x = xCenter + textOptions.marginLeft;\n        text.position.y = yCenter + textOptions.marginTop;\n        this.addChild(text);\n        this._text = text;\n    }\n    updateValue(value) {\n        this._value = value;\n        this._text.text = value;\n    }\n    add(value) {\n        this.updateValue(this._value + value);\n    }\n    sub(value) {\n        this.updateValue(this._value - value);\n    }\n}\nexports.StatusBarTile = StatusBarTile;\nStatusBarTile.TYPES = StatusType;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.World = void 0;\nconst FarmGrid_1 = require(\"./FarmGrid\");\nconst logger_1 = require(\"./logger\");\nconst StatusBar_1 = require(\"./StatusBar\");\nconst ShopBar_1 = require(\"./ShopBar\");\nconst ShopTile_1 = require(\"./ShopTile\");\nconst FarmGridTile_1 = require(\"./FarmGridTile\");\nconst StatusBarTile_1 = require(\"./StatusBarTile\");\nvar UIState;\n(function (UIState) {\n    UIState[UIState[\"idle\"] = 0] = \"idle\";\n    UIState[UIState[\"toBuildCorn\"] = 1] = \"toBuildCorn\";\n    UIState[UIState[\"toBuildChicken\"] = 2] = \"toBuildChicken\";\n    UIState[UIState[\"toBuildCow\"] = 3] = \"toBuildCow\";\n    UIState[UIState[\"toFeedCorn\"] = 4] = \"toFeedCorn\";\n})(UIState || (UIState = {}));\nclass World {\n    constructor({ app, gameLoader }) {\n        this.scaleX = 1;\n        this.scaleY = 1;\n        this.aspectXRatio = 3;\n        this.aspectYRatio = 5;\n        this._state = UIState.idle;\n        this.resizeHandler = () => {\n            const { view } = this.app;\n            view.width = window.innerWidth;\n            view.height = window.innerHeight;\n            let availableWidth = view.width;\n            let availableHeight = view.height;\n            if (availableWidth > availableHeight) {\n                (0, logger_1.logFarmLayout)(`ww=${availableWidth} > wh=${availableHeight}`);\n                availableWidth = Math.floor(availableHeight / this.aspectYRatio) * this.aspectXRatio;\n            }\n            else if (availableWidth < availableHeight) {\n                (0, logger_1.logFarmLayout)(`ww=${availableWidth} < wh=${availableHeight}`);\n                availableHeight = Math.floor(availableWidth / this.aspectXRatio) * this.aspectYRatio;\n            }\n            this.scaleX = availableWidth / this.farmGrid.totalWidth;\n            this.scaleY = availableHeight / (this.statusBar.totalHeight + this.farmGrid.totalHeight + this.shopBar.totalHeight);\n            (0, logger_1.logFarmLayout)(`aw=${availableWidth} ah=${availableHeight} sx=${this.scaleX} sy=${this.scaleY}`);\n            const x = view.width > availableWidth ? (view.width - availableWidth) / 2 : 0;\n            const y = view.height > availableHeight ? (view.height - availableHeight) / 2 : 0;\n            this.statusBar.x = x;\n            this.statusBar.y = y;\n            this.farmGrid.x = x;\n            this.farmGrid.y = this.statusBar.y + this.statusBar.totalHeight * this.scaleY;\n            this.shopBar.x = x;\n            this.shopBar.y = this.farmGrid.y + this.farmGrid.totalHeight * this.scaleY;\n            (0, logger_1.logFarmLayout)(`stx=${this.statusBar.x} sty=${this.statusBar.y} grx=${this.farmGrid.x} gry=${this.farmGrid.y} spx=${this.shopBar.x} spy=${this.shopBar.y}`);\n            this.statusBar.scale.set(this.scaleX, this.scaleY);\n            this.farmGrid.scale.set(this.scaleX, this.scaleY);\n            this.shopBar.scale.set(this.scaleX, this.scaleY);\n        };\n        this.handleFramGridClick = (tile) => {\n            switch (this._state) {\n                case UIState.idle:\n                    if (tile.isOccupied) {\n                        const result = tile.harvest();\n                        if (result !== 0) {\n                            switch (tile.type) {\n                                case FarmGridTile_1.FarmGridTile.TYPES.corn:\n                                    this.statusBar.addCorn(result);\n                                    break;\n                                case FarmGridTile_1.FarmGridTile.TYPES.chicken:\n                                    this.statusBar.addEgg(result);\n                                    break;\n                                case FarmGridTile_1.FarmGridTile.TYPES.cow:\n                                    this.statusBar.addMilk(result);\n                                    break;\n                            }\n                        }\n                    }\n                    break;\n                case UIState.toBuildCorn:\n                case UIState.toBuildChicken:\n                case UIState.toBuildCow:\n                    if (tile.isFree) {\n                        let newType = null;\n                        let cost = 0;\n                        switch (this._state) {\n                            case UIState.toBuildCorn:\n                                newType = FarmGridTile_1.FarmGridTile.TYPES.corn;\n                                cost = this.shopBar.cornOptions.cost;\n                                break;\n                            case UIState.toBuildChicken:\n                                newType = FarmGridTile_1.FarmGridTile.TYPES.chicken;\n                                cost = this.shopBar.chickenOptions.cost;\n                                break;\n                            case UIState.toBuildCow:\n                                newType = FarmGridTile_1.FarmGridTile.TYPES.cow;\n                                cost = this.shopBar.cowOptions.cost;\n                                break;\n                        }\n                        if (newType != null) {\n                            tile.setType(newType);\n                            this.statusBar.subMoney(cost);\n                        }\n                        if (this.statusBar.money >= cost) {\n                            // continue\n                        }\n                        else {\n                            this.shopBar.deselectAll();\n                            this.setUIState(UIState.idle);\n                        }\n                    }\n                    break;\n                case UIState.toFeedCorn:\n                    if (tile.isFeedable) {\n                        tile.feed(1);\n                        this.statusBar.subCorn(1);\n                        if (this.statusBar.corn >= 1) {\n                            // continue\n                        }\n                        else {\n                            this.statusBar.deselectAll();\n                            this.setUIState(UIState.idle);\n                        }\n                    }\n                    break;\n            }\n        };\n        this.handleStatusBarClick = (tile) => {\n            if (tile.isSelected && tile.type === StatusBarTile_1.StatusBarTile.TYPES.corns) {\n                if (tile.value >= 1) {\n                    this.shopBar.deselectAll();\n                    this.setUIState(UIState.toFeedCorn);\n                }\n                else {\n                    this.statusBar.deselectAll();\n                }\n            }\n            else {\n                this.setUIState(UIState.idle);\n            }\n            switch (tile.type) {\n                case StatusBarTile_1.StatusBarTile.TYPES.eggs:\n                    this.statusBar.sellEggs();\n                    break;\n                case StatusBarTile_1.StatusBarTile.TYPES.milks:\n                    this.statusBar.sellMilks();\n                    break;\n            }\n        };\n        this.handleShopBarClick = (tile) => {\n            this.statusBar.deselectAll();\n            if (tile.isSelected) {\n                if (tile.cost > 0 && this.statusBar.money >= tile.cost) {\n                    switch (tile.type) {\n                        case ShopTile_1.ShopTile.TYPES.corn:\n                            this.setUIState(UIState.toBuildCorn);\n                            break;\n                        case ShopTile_1.ShopTile.TYPES.chicken:\n                            this.setUIState(UIState.toBuildChicken);\n                            break;\n                        case ShopTile_1.ShopTile.TYPES.cow:\n                            this.setUIState(UIState.toBuildCow);\n                            break;\n                    }\n                }\n                else {\n                    this.shopBar.deselectAll();\n                }\n            }\n            else {\n                this.setUIState(UIState.idle);\n            }\n        };\n        this.handleAppTick = () => {\n            this.farmGrid.handleWorldTick(this.app.ticker.deltaMS);\n        };\n        this.app = app;\n        this.gameLoader = gameLoader;\n        this.app.ticker.add(this.handleAppTick);\n    }\n    setup() {\n        this.setupCanvas();\n        this.setupLayout();\n        this.resizeHandler();\n    }\n    setupCanvas() {\n        document.body.style.cssText = 'padding: 0; margin: 0;';\n        this.app.view.style.cssText = 'display: block;';\n        document.body.appendChild(this.app.view);\n        window.addEventListener('resize', this.resizeHandler);\n    }\n    setupLayout() {\n        const { textures, animations } = this.gameLoader.spritesheet;\n        this.statusBar = new StatusBar_1.StatusBar({\n            textures: {\n                money: textures['icon-money.png'],\n                corn: textures['icon-corn.png'],\n                egg: textures['icon-egg.png'],\n                milk: textures['icon-milk.png']\n            },\n            onTileClick: this.handleStatusBarClick\n        });\n        this.app.stage.addChild(this.statusBar);\n        this.farmGrid = new FarmGrid_1.FarmGrid({\n            textures: {\n                grass: textures['grass.png'],\n                cornMask: textures['corn-mask.png'],\n                chickenMask: textures['chicken-mask.png'],\n                cowMask: textures['cow-mask.png'],\n                cornAnimated: animations.corn,\n                chickenAnimated: animations.chicken,\n                cowAnimated: animations.cow\n            },\n            onTileClick: this.handleFramGridClick\n        });\n        this.app.stage.addChild(this.farmGrid);\n        this.shopBar = new ShopBar_1.ShopBar({\n            textures: {\n                money: textures['icon-money.png'],\n                corn: animations.corn[0],\n                chicken: animations.chicken[0],\n                cow: animations.cow[0]\n            },\n            onTileClick: this.handleShopBarClick\n        });\n        this.app.stage.addChild(this.shopBar);\n    }\n    setUIState(state) {\n        switch (state) {\n            case UIState.idle:\n                this.farmGrid.showFree();\n                break;\n            case UIState.toBuildCorn:\n                this.farmGrid.showBuildableCorn();\n                break;\n            case UIState.toBuildChicken:\n                this.farmGrid.showBuildableChicken();\n                break;\n            case UIState.toBuildCow:\n                this.farmGrid.showBuildableCow();\n                break;\n            case UIState.toFeedCorn:\n                this.farmGrid.showFeedable();\n                break;\n        }\n        this._state = state;\n    }\n}\nexports.World = World;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst pixi_js_1 = require(\"pixi.js\");\nconst World_1 = require(\"./World\");\nconst GameLoader_1 = require(\"./GameLoader\");\nasync function run() {\n    const gameLoader = new GameLoader_1.GameLoader();\n    await gameLoader.loadAll();\n    const app = new pixi_js_1.Application({\n        width: window.innerWidth,\n        height: window.innerHeight,\n        backgroundColor: 0xe6e7ea\n        // resolution: window.devicePixelRatio > 0 ? window.devicePixelRatio : 1\n    });\n    const world = new World_1.World({ app, gameLoader });\n    world.setup();\n}\nrun().catch(console.error);\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.logFarmProgress = exports.logFarmShop = exports.logFarmStatus = exports.logFarmLayout = exports.logFarmTile = exports.logFarmGrid = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nexports.logFarmGrid = (0, debug_1.default)('farm-grid');\nexports.logFarmTile = (0, debug_1.default)('farm-tile');\nexports.logFarmLayout = (0, debug_1.default)('farm-layout');\nexports.logFarmStatus = (0, debug_1.default)('farm-status');\nexports.logFarmShop = (0, debug_1.default)('farm-shop');\nexports.logFarmProgress = (0, debug_1.default)('farm-progress');\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ProgressBar = void 0;\nconst pixi_js_1 = require(\"pixi.js\");\nconst logger_1 = require(\"../logger\");\nclass ProgressBar extends pixi_js_1.Graphics {\n    constructor({ x, y, width, height, value, minColor, maxColor }) {\n        super();\n        this.borderWidth = 1;\n        this.initX = x;\n        this.initY = y;\n        this.initWidth = width;\n        this.initHeight = height;\n        this.minColor = minColor;\n        this.minColorArray = this.numColorToArray(this.minColor);\n        this.maxColor = maxColor;\n        this.maxColorArray = this.numColorToArray(this.maxColor);\n        this.update(value);\n    }\n    toHex(num) {\n        let hex = num.toString(16);\n        if (hex.length === 1) {\n            hex = '0' + hex;\n        }\n        return hex;\n    }\n    numColorToArray(num) {\n        const numStr = num.toString(16).padStart(6, '0');\n        const r = Number.parseInt(numStr[0] + numStr[1], 16); // rgb >> 16;\n        const g = Number.parseInt(numStr[2] + numStr[3], 16); // (rgb >> 8) % 256;\n        const b = Number.parseInt(numStr[4] + numStr[5], 16); // rgb % 256;\n        return [r, g, b];\n    }\n    interpolateColors(p) {\n        const q = 1 - p;\n        const [r1, g1, b1] = this.maxColorArray;\n        const [r2, g2, b2] = this.minColorArray;\n        const rr = Math.round(r1 * p + r2 * q);\n        const rg = Math.round(g1 * p + g2 * q);\n        const rb = Math.round(b1 * p + b2 * q);\n        // return Number((rr << 16) + (rg << 8) + rb).toString(16)\n        return this.toHex(rr) + this.toHex(rg) + this.toHex(rb);\n    }\n    update(value) {\n        const { initX, initY, initWidth, initHeight, minColor, maxColor } = this;\n        if (value >= 1) {\n            value = 1;\n        }\n        else if (value <= 0) {\n            value = 0;\n        }\n        this.clear();\n        if (minColor === maxColor) {\n            this.beginFill(minColor);\n        }\n        else {\n            const colorStr = this.interpolateColors(value);\n            const color = Number.parseInt(colorStr, 16);\n            this.beginFill(color);\n        }\n        (0, logger_1.logFarmProgress)(`x=${initX} y=${initY} width=${initWidth} height=${initHeight}`);\n        this.drawRect(initX, initY, Math.round(initWidth * value), initHeight);\n        this.endFill();\n    }\n}\nexports.ProgressBar = ProgressBar;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StrokeRect = void 0;\nconst pixi_js_1 = require(\"pixi.js\");\nclass StrokeRect extends pixi_js_1.Graphics {\n    constructor(options) {\n        super();\n        this.setup(options);\n    }\n    setup({ x, y, width, height, color, strokeWidth = 1 }) {\n        this.clear();\n        this.beginFill(color);\n        this.drawRect(x, y, width, height);\n        this.endFill();\n        this.beginHole();\n        this.drawRect(x + strokeWidth, y + strokeWidth, width - strokeWidth * 2, height - strokeWidth * 2);\n        this.endHole();\n    }\n}\nexports.StrokeRect = StrokeRect;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Tile = void 0;\nconst pixi_js_1 = require(\"pixi.js\");\nconst logger_1 = require(\"../logger\");\nclass Tile extends pixi_js_1.Container {\n    constructor({ id, x, y, width, height, isInteractive = true, isButtonMode = true, showSelected = true, showHover = true, onClick }) {\n        super();\n        this.isSelected = false;\n        this.buttonMode = true;\n        this.cursor = 'pointer';\n        this.handleClick = () => {\n            this.toggle();\n            if (typeof this.onClick === 'function') {\n                this.onClick(this);\n            }\n        };\n        this.handleMouseOver = () => {\n            if (this.showHover) {\n                if (this.showSelected && this.isSelected) {\n                    // skip\n                }\n                else {\n                    this.fillColor(Tile.COLORS.hover);\n                }\n            }\n        };\n        this.handleMouseOut = () => {\n            if (this.showHover) {\n                if (this.showSelected && this.isSelected) {\n                    // skip\n                }\n                else {\n                    this.fillColor(Tile.COLORS.regular);\n                }\n            }\n        };\n        this.graphics = new pixi_js_1.Graphics();\n        this.addChild(this.graphics);\n        this.interactive = isInteractive;\n        this.buttonMode = isButtonMode;\n        this.id = id;\n        this.showSelected = showSelected;\n        this.showHover = showHover;\n        this.posX = x;\n        this.posY = y;\n        this.cellWidth = width;\n        this.cellHeight = height;\n        this.fillColor(Tile.COLORS.regular);\n        this.on('mouseover', this.handleMouseOver);\n        this.on('mouseout', this.handleMouseOut);\n        this.onClick = onClick;\n        this.on('pointerdown', this.handleClick);\n    }\n    fillColor(color) {\n        this.graphics.clear();\n        (0, logger_1.logFarmTile)(color);\n        this.graphics.beginFill(color);\n        (0, logger_1.logFarmTile)(this.posX, this.posY, this.cellWidth, this.cellHeight);\n        this.graphics.drawRect(this.posX, this.posY, this.cellWidth, this.cellHeight);\n        this.graphics.endFill();\n    }\n    select() {\n        if (!this.isSelected) {\n            this.isSelected = true;\n        }\n        if (this.showSelected && this.isSelected) {\n            this.fillColor(Tile.COLORS.active);\n        }\n    }\n    deselect() {\n        if (this.isSelected) {\n            this.isSelected = false;\n        }\n        if (this.showSelected && !this.isSelected) {\n            this.fillColor(Tile.COLORS.regular);\n        }\n    }\n    toggle() {\n        if (this.isSelected) {\n            this.deselect();\n        }\n        else {\n            this.select();\n        }\n    }\n}\nexports.Tile = Tile;\nTile.COLORS = {\n    regular: 0xffffff,\n    active: 0x0d21a1,\n    hover: 0x515BA1\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t\"main\": 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunktest_farm\"] = self[\"webpackChunktest_farm\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [\"vendor\"], () => (__webpack_require__(\"./src/app.ts\")))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n",""],"names":[],"sourceRoot":""}